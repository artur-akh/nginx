# Здесь мы назначили веса для каждого сервера в группе backend. 
# Сервер server2.example.com будет получать в три раза больше запросов, чем server3.example.com, а server1.example.com будет получать в два раза больше запросов, чем server3.example.com
# Round Robin стратегия
http {
  upstream backend {
    server server1.example.com weight=2;
    server server2.example.com weight=3;
    server server3.example.com weight=1;
  }

  server {
    listen 80;
    server_name example.com;

    location / {
      proxy_pass http://backend;
    }
  }
}
---
# Least Connections - это стратегия балансировки нагрузки, при которой новый запрос отправляется на сервер с наименьшим количеством активных соединений в группе серверов.

http {
  upstream backend {
    least_conn;
    server server1.example.com;
    server server2.example.com;
    server server3.example.com;
  }

  server {
    listen 80;
    server_name example.com;

    location / {
      proxy_pass http://backend;
    }
  }
}
---
# IP Hash - это стратегия балансировки нагрузки, при которой новый запрос отправляется на сервер на основе хеша IP-адреса клиента. Ниже приведен пример конфигурации nginx для использования стратегии IP Hash:
# Когда новый запрос поступает на балансировщик нагрузки, nginx вычисляет хеш IP-адреса клиента и отправляет запрос на сервер с соответствующим хешем. Это может быть полезным, если вам нужно, чтобы запросы от одного и того же клиента всегда направлялись на один и тот же сервер в группе.

http {
  upstream backend {
    ip_hash;
    server server1.example.com;
    server server2.example.com;
    server server3.example.com;
  }

  server {
    listen 80;
    server_name example.com;

    location / {
      proxy_pass http://backend;
    }
  }
}
---
# Random - это стратегия балансировки нагрузки, при которой новый запрос отправляется на случайный сервер в группе. Ниже приведен пример конфигурации nginx для использования стратегии Random:
# Когда новый запрос поступает на балансировщик нагрузки, nginx случайным образом выбирает сервер в группе для обработки запроса. Это может быть полезным, если вы хотите распределять нагрузку равномерно между серверами в группе, но не имеете особых требований к распределению запросов между серверами.

http {
  upstream backend {
    random;
    server server1.example.com;
    server server2.example.com;
    server server3.example.com;
  }

  server {
    listen 80;
    server_name example.com;

    location / {
      proxy_pass http://backend;
    }
  }
}
---
# Sticky Sessions (также известная как session persistence) - это стратегия балансировки нагрузки, при которой новый запрос отправляется на тот же сервер, что и предыдущий запрос от того же клиента. Это обычно достигается путем сохранения идентификатора сессии клиента и привязки его к конкретному серверу в группе.

http {
  upstream backend {
    server server1.example.com;
    server server2.example.com;
    server server3.example.com;

    sticky route {
      expires 1h;
      path /;
      domain example.com;
      httponly;
    }
  }

  server {
    listen 80;
    server_name example.com;

    location / {
      proxy_pass http://backend;
    }
  }
}